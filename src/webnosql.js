// Generated by CoffeeScript 1.9.1

/*
  @name: WebNoSQL
  @author: Konstantin Timokhin
  @email: theifish@gmail.com
 */

(function() {
  var ObjectID, WebNoSQL, WebNoSQL_DB, WebNoSQL_Query, defaultDBopts, log,
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ObjectID = (function() {
    function ObjectID(val1) {
      var i, j;
      this.val = val1 != null ? val1 : void 0;
      if (this.val === void 0) {
        this.val = Math.floor(new Date().getTime() / 1000).toString(16);
        for (i = j = 0; j <= 2; i = ++j) {
          this.val += (Math.random() * 16 | 0).toString(16);
        }
      }
    }

    ObjectID.prototype.getTimestamp = function() {
      return parseInt(this.val.substr(0, 8), 16);
    };

    ObjectID.prototype.toSting = function() {
      return this.val.toString();
    };

    ObjectID.prototype.valueOf = function() {
      return this.val.toString();
    };

    return ObjectID;

  })();

  log = {
    error: function(text) {
      return console.error(text);
    },
    warn: function(text) {
      return console.warn(text);
    },
    log: function(text) {
      return console.log(text);
    }
  };

  defaultDBopts = {
    version: '1.0',
    desc: '',
    size: 1024 * 1024
  };

  WebNoSQL_Query = (function() {
    function WebNoSQL_Query($wnsdb, $name) {
      this.$wnsdb = $wnsdb;
      this.$name = $name;
      this.opts = [];
    }

    WebNoSQL_Query.prototype._add_opts = function(opts) {
      var key, val;
      if (opts.type === void 0) {
        if (this.opts.length === 0 || this.opts[this.opts.length - 1].type !== "find") {
          log.warn("Wrong options used");
        } else {
          for (key in opts) {
            val = opts[key];
            this.opts[this.opts.length - 1][key] = val;
          }
        }
      } else {
        this.opts.push(opts);
      }
      return this;
    };

    WebNoSQL_Query.prototype.insert = function(data) {
      return this._add_opts({
        data: data,
        type: "insert"
      });
    };

    WebNoSQL_Query.prototype.update = function(filter, data, opts) {
      if (opts == null) {
        opts = void 0;
      }
      return this._add_opts({
        type: "update",
        filter: filter,
        data: data,
        opts: opts
      });
    };

    WebNoSQL_Query.prototype.find = function(filter) {
      if (filter == null) {
        filter = void 0;
      }
      return this._add_opts({
        type: "find",
        filter: filter
      });
    };

    WebNoSQL_Query.prototype.limit = function(num1, num2) {
      if (num2 == null) {
        num2 = void 0;
      }
      return this._add_opts({
        limit: [num1, num2]
      });
    };

    WebNoSQL_Query.prototype.sort = function(sort) {
      return this._add_opts({
        sort: sort
      });
    };

    WebNoSQL_Query.prototype["delete"] = function(filter) {
      if (filter == null) {
        filter = void 0;
      }
      return this._add_opts({
        type: "delete",
        filter: filter
      });
    };

    WebNoSQL_Query.prototype.count = function(filter) {
      if (filter == null) {
        filter = void 0;
      }
      return this._add_opts({
        type: "count",
        filter: filter
      });
    };

    WebNoSQL_Query.prototype.drop = function() {
      return this._add_opts({
        type: "drop"
      });
    };

    WebNoSQL_Query.prototype._construct_where = function(name, obj) {
      var j, key, len, o, res, results1;
      if (typeof obj === "int" || typeof obj === "float" || typeof obj === "boolean") {
        return name + "=" + obj.toString();
      } else if (typeof obj === "object") {
        res = "";
        results1 = [];
        for (o = j = 0, len = obj.length; j < len; o = ++j) {
          key = obj[o];
          if (key === "$in" && typeof o === "array") {
            if (res !== "") {
              res += " and ";
            }
            results1.push(res += name + " in " + JSON.stringify(o));
          } else if (key === "&lt") {
            if (res !== "") {
              res += " and ";
            }
            results1.push(res += name + " < " + JSON.stringify(o));
          } else if (key === "&gt") {
            if (res !== "") {
              res += " and ";
            }
            results1.push(res += name + " > " + JSON.stringify(o));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      } else {
        if (obj !== "string") {
          obj = obj.toString();
        }
        return name + "='" + obj.replace("'", "\'") + "'";
      }
    };

    WebNoSQL_Query.prototype._item_is_in_scope = function(item, filter, filter_columns, operation) {
      var fval, key, loc_result, op, opv, ref, result, tmp;
      if (operation == null) {
        operation = "and";
      }
      result = false;
      for (key in filter) {
        if (!hasProp.call(filter, key)) continue;
        fval = filter[key];
        if (key.substr(0, 1) === "$") {
          if (key === "$or") {
            tmp = this._item_is_in_scope(item, fval, filter_columns, "or");
            if (operation === "and" && !tmp) {
              return false;
            } else {
              result = result || tmp;
            }
          }
          if (key === "$and") {
            tmp = this._item_is_in_scope(item, fval, filter_columns, "and");
            if (operation === "and" && !tmp) {
              return false;
            } else {
              result = result || tmp;
            }
          } else if (key === "$not") {
            tmp = !this._item_is_in_scope(item, fval, filter_columns, "or");
            if (operation === "and" && !tmp) {
              return false;
            } else {
              result = result || tmp;
            }
          }
        } else {
          if (indexOf.call(filter_columns, key) >= 0) {
            if (typeof fval === "object") {
              loc_result = true;
              for (op in fval) {
                opv = fval[op];
                if (op === "$lt") {
                  loc_result = loc_result && item[key] < opv;
                } else if (op === "$gt") {
                  loc_result = loc_result && item[key] > opv;
                } else if (op === "$in") {
                  loc_result = loc_result && (ref = item[key], indexOf.call(opv, ref) >= 0);
                }
              }
              if (operation === "and" && !loc_result) {
                return false;
              } else {
                result = result || loc_result;
              }
            } else {
              if (operation === "and" && item[key] !== fval) {
                return false;
              } else {
                result = result || item[key] === fval;
              }
            }
          }
        }
      }
      return result;
    };

    WebNoSQL_Query.prototype._filter_columns = function(filter) {
      var e, item, j, key, len, result, tmp;
      result = [];
      for (key in filter) {
        if (!hasProp.call(filter, key)) continue;
        item = filter[key];
        if (key.substr(0, 1) === "$") {
          tmp = this._filter_columns(item);
          for (j = 0, len = tmp.length; j < len; j++) {
            e = tmp[j];
            if (indexOf.call(result, e) < 0) {
              result.push(e);
            }
          }
        } else {
          if (indexOf.call(result, key) < 0) {
            result.push(key);
          }
        }
      }
      return result;
    };

    WebNoSQL_Query.prototype._get_items_from_rows = function(rows, filter, limit, sort) {
      var filter_columns, i, item, items, j, ref, sort_func, tmp;
      if (filter == null) {
        filter = void 0;
      }
      if (limit == null) {
        limit = void 0;
      }
      if (sort == null) {
        sort = void 0;
      }
      items = [];
      filter_columns = [];
      if (filter !== void 0) {
        filter_columns = this._filter_columns(filter);
      }
      if (rows.length > 0) {
        for (i = j = 0, ref = rows.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          tmp = rows.item(i);
          if (tmp.data) {
            item = JSON.parse(tmp.data);
            item._id = tmp._id;
            if (filter === void 0 || this._item_is_in_scope(item, filter, filter_columns)) {
              items.push(item);
            }
          }
        }
        if (sort !== void 0) {
          sort_func = function(a, b) {
            var key, sort_res, val;
            sort_res = 0;
            for (key in sort) {
              val = sort[key];
              if (a[key] === void 0 && b[key] !== void 0) {
                if (val === 1 || val === -1) {
                  return val;
                }
              } else if (a[key] !== void 0 && b[key] === void 0) {
                if (val === 1 || val === -1) {
                  return -val;
                }
              } else if (a[key] !== void 0 && b[key] !== void 0) {
                if (val === 1 || val === -1) {
                  if (a[key] > b[key]) {
                    return val;
                  } else if (a[key] < b[key]) {
                    return -val;
                  }
                }
              }
            }
            return sort_res;
          };
          items.sort(sort_func);
        }
        if (limit !== void 0) {
          if (typeof limit === "number") {
            items = items.splice(0, limit);
          } else {
            if (limit[1] === void 0) {
              items = items.splice(0, limit[0]);
            } else {
              items = items.splice(limit[0], limit[1]);
            }
          }
        }
        return items;
      }
    };

    WebNoSQL_Query.prototype._select_rows = function(tx, filter, limit, sort, cb) {
      var self, sql;
      self = this;
      sql = "SELECT * from " + this.$name;
      if (filter && filter["_id"]) {
        sql += " where " + this._construct_where("_id", filter["_id"]);
      }
      return tx.executeSql(sql, [], function(tx, results) {
        if (cb !== void 0) {
          return cb(false, self._get_items_from_rows(results.rows, filter, limit, sort));
        }
      }, function(error) {
        if (cb !== void 0) {
          return cb(true);
        }
      });
    };

    WebNoSQL_Query.prototype._do_options = function(tx, cb) {
      var key, o, ref, results1, self;
      self = this;
      ref = this.opts;
      results1 = [];
      for (key in ref) {
        o = ref[key];
        results1.push((function(o, is_last) {
          var data, id, sql;
          if (o.type === "find") {
            return self._select_rows(tx, o.filter, o.limit, o.sort, function(error, items) {
              if (cb !== void 0 && is_last) {
                return cb(error, items);
              }
            });
          } else if (o.type === "delete") {
            if (o.filter !== void 0) {
              return self._select_rows(tx, o.filter, void 0, void 0, function(error, items) {
                var ids, sql, val;
                if (!error && items.length === 0) {
                  if (cb !== void 0 && is_last) {
                    return cb(false);
                  }
                } else if (!error) {
                  ids = "";
                  for (key in items) {
                    val = items[key];
                    if (ids !== "") {
                      ids += ",";
                    }
                    ids += "'" + val._id.toString() + "'";
                  }
                  sql = "DELETE FROM " + self.$name + " WHERE _id in (" + ids + ")";
                  return tx.executeSql(sql, [], function(tx, result) {
                    if (cb !== void 0 && is_last) {
                      return cb(false);
                    }
                  }, function(error) {
                    if (cb !== void 0 && is_last) {
                      return cb(true);
                    }
                  });
                } else {
                  return cb(true);
                }
              });
            } else {
              sql = "DELETE FROM " + self.$name;
              return tx.executeSql(sql, [], function(tx, result) {
                if (cb !== void 0 && is_last) {
                  return cb(false);
                }
              }, function(error) {
                if (cb !== void 0 && is_last) {
                  return cb(true);
                }
              });
            }
          } else if (o.type === "insert") {
            id = new ObjectID();
            data = JSON.stringify(o.data || {});
            sql = "INSERT INTO " + self.$name + "(_id, data) VALUES('" + id + "', '" + data + "')";
            return tx.executeSql(sql, [], function(tx, result) {
              if (cb !== void 0 && is_last) {
                return cb(false, id);
              }
            }, function(error) {
              if (cb !== void 0 && is_last) {
                return cb(true);
              }
            });
          } else if (o.type === "update") {
            if (o.filter !== void 0) {
              return self._select_rows(tx, o.filter, void 0, void 0, function(error, items) {
                var item, results2;
                if (!error && items && items.length) {
                  results2 = [];
                  for (key in items) {
                    item = items[key];
                    results2.push((function(item, is_last) {
                      var _id, ref1, val;
                      _id = item._id;
                      if (o.data["$set"]) {
                        data = item;
                        ref1 = o.data["$set"];
                        for (key in ref1) {
                          val = ref1[key];
                          data[key] = val;
                        }
                        delete data._id;
                      } else {
                        data = o.data;
                      }
                      sql = "UPDATE " + self.$name + " SET data='" + JSON.stringify(data) + "' WHERE _id='" + _id.toString() + "'";
                      return tx.executeSql(sql, [], function(tx, result) {
                        if (cb !== void 0 && is_last) {
                          return cb(false);
                        }
                      }, function(error) {
                        if (cb !== void 0 && is_last) {
                          return cb(true);
                        }
                      });
                    })(item, is_last && (parseInt(key, 10) === items.length - 1)));
                  }
                  return results2;
                } else if (!error) {
                  if (cb !== void 0 && is_last) {
                    return cb(false);
                  }
                } else {
                  if (cb !== void 0 && is_last) {
                    return cb(true);
                  }
                }
              });
            }
          } else if (o.type === "count") {
            if (o.filter !== void 0) {
              return self._select_rows(tx, o.filter, void 0, void 0, function(error, items) {
                if (!error && items && items.length) {
                  if (cb !== void 0 && is_last) {
                    return cb(false, items.length);
                  }
                } else if (!error) {
                  if (cb !== void 0 && is_last) {
                    return cb(false, 0);
                  }
                } else {
                  if (cb !== void 0 && is_last) {
                    return cb(true);
                  }
                }
              });
            } else {
              sql = "SELECT COUNT(_id) as cnt FROM " + self.$name;
              return tx.executeSql(sql, [], function(tx, result) {
                if (result.rows.length) {
                  if (cb !== void 0 && is_last) {
                    return cb(false, result.rows.item(0).cnt);
                  }
                } else {
                  if (cb !== void 0 && is_last) {
                    return cb(false, 0);
                  }
                }
              }, function(error) {
                if (cb !== void 0 && is_last) {
                  return cb(true);
                }
              });
            }
          }
        })(o, parseInt(key, 10) === this.opts.length - 1));
      }
      return results1;
    };

    WebNoSQL_Query.prototype.then = function(cb) {
      var self;
      if (cb == null) {
        cb = void 0;
      }
      self = this;
      return this.$wnsdb.$db.transaction(function(tx) {
        return tx.executeSql("SELECT * FROM sqlite_master WHERE type='table' and tbl_name=?", [self.$name], function(tx, results) {
          if (results && results.rows.length) {
            return self._do_options(tx, cb);
          } else {
            return tx.executeSql("CREATE TABLE IF NOT EXISTS " + self.$name + "(_id TEXT PRIMARY KEY, data TEXT)", [], function(tx, results) {
              return self._do_options(tx, cb);
            }, function(error) {
              log.error("Unable to create collection " + self.$name);
              if (cb !== void 0) {
                return cb(true);
              }
            });
          }
        }, function(error) {
          log.error("Something wrong with table " + self.$name);
          if (cb !== void 0) {
            return cb(true);
          }
        });
      });
    };

    WebNoSQL_Query.prototype.run = function() {
      return this.then();
    };

    WebNoSQL_Query.prototype.exec = function() {
      return this.then();
    };

    return WebNoSQL_Query;

  })();

  WebNoSQL_DB = (function() {
    function WebNoSQL_DB($name, opts) {
      var e;
      this.$name = $name;
      if (opts == null) {
        opts = {};
      }
      this.$db = void 0;
      this.$tbls = [];
      this.$opts = {
        version: opts.version || defaultDBopts.version,
        desc: opts.desc || defaultDBopts.desc,
        size: opts.size || defaultDBopts.size
      };
      try {
        this.$db = openDatabase(this.$name, this.$opts.version, this.$opts.desc, this.$opts.size);
      } catch (_error) {
        e = _error;
        log.error('Unable to open db "' + this.$name + '"');
      }
    }

    WebNoSQL_DB.prototype.collections = function(cb) {
      if (this.$db !== void 0) {
        return this.$db.transaction(function(tx) {
          return tx.executeSql("SELECT * FROM sqlite_master WHERE type='table'", [], function(tx, results) {
            var i, items, j, ref;
            items = [];
            if (results && results.rows.length) {
              for (i = j = 0, ref = results.rows.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
                items.push(results.rows.item(i).tbl_name);
              }
            }
            if (cb !== void 0) {
              return cb(false, items);
            }
          }, function(error) {
            if (cb !== void 0) {
              return cb(true);
            }
          });
        });
      } else {
        if (cb !== void 0) {
          return cb(true);
        }
      }
    };

    WebNoSQL_DB.prototype.collection = function(name) {
      return new WebNoSQL_Query(this, name);
    };

    return WebNoSQL_DB;

  })();

  WebNoSQL = (function() {
    function WebNoSQL() {
      this.open_dbs = {};
    }

    WebNoSQL.prototype.isDriverAvailable = function() {
      if (window.openDatabase) {
        return true;
      } else {
        return false;
      }
    };

    WebNoSQL.prototype.use = function(db_name, opts) {
      if (opts == null) {
        opts = void 0;
      }
      if (this.isDriverAvailable()) {
        if (this.open_dbs[db_name] === void 0) {
          this.open_dbs[db_name] = new WebNoSQL_DB(db_name, opts);
        }
        return this.open_dbs[db_name];
      } else {
        return log.error("No SQL support in your browser");
      }
    };

    return WebNoSQL;

  })();

  window.webnosql = new WebNoSQL();

}).call(this);

//# sourceMappingURL=webnosql.js.map
